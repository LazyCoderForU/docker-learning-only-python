pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'your-docker-registry' // Replace with your Docker registry
        DOCKER_IMAGE_PREFIX = 'docker-learning-only-python'
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone the repository
                git branch: 'main', url: 'https://github.com/your-repo-url.git'
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Build Docker images for all services
                    sh 'docker build -t ${DOCKER_IMAGE_PREFIX}-game-logic -f Dockerfile.game_logic .'
                    sh 'docker build -t ${DOCKER_IMAGE_PREFIX}-user-interaction -f Dockerfile.user_interaction .'
                    sh 'docker build -t ${DOCKER_IMAGE_PREFIX}-real-time-updates -f Dockerfile.real_time_updates .'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run tests (if any)
                    sh 'docker-compose up -d'
                    // Add test commands here
                    sh 'docker-compose down'
                }
            }
        }

        stage('Push to Docker Registry') {
            steps {
                script {
                    // Push Docker images to the registry
                    sh 'docker tag ${DOCKER_IMAGE_PREFIX}-game-logic ${DOCKER_REGISTRY}/${DOCKER_IMAGE_PREFIX}-game-logic'
                    sh 'docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_PREFIX}-game-logic'

                    sh 'docker tag ${DOCKER_IMAGE_PREFIX}-user-interaction ${DOCKER_REGISTRY}/${DOCKER_IMAGE_PREFIX}-user-interaction'
                    sh 'docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_PREFIX}-user-interaction'

                    sh 'docker tag ${DOCKER_IMAGE_PREFIX}-real-time-updates ${DOCKER_REGISTRY}/${DOCKER_IMAGE_PREFIX}-real-time-updates'
                    sh 'docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_PREFIX}-real-time-updates'
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Deploy the application (if applicable)
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            // Cleanup Docker containers
            sh 'docker-compose down'
        }
    }
}